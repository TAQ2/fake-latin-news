{"version":3,"sources":["theme.js","containers/Header/index.js","containers/components/Card.js","containers/Comments/Comment.js","containers/components/Button.js","actions/comments.js","containers/Comments/AddComment.js","containers/Comments/index.js","containers/Posts/Post.js","containers/Posts/index.js","actions/posts.js","actions/userMetrics.js","containers/App/index.js","serviceWorker.js","reducers/comments.js","reducers/posts.js","reducers/userMetrics.js","reducers/index.js","index.js"],"names":["screenBreakpoints","small","tablet","colours","primary","Container","styled","animated","header","_templateObject","connect","state","hasScrolled","userMetrics","scrollY","screenWidth","_ref","animation","useSpring","fontSize","background","concat","react_default","a","createElement","style","color","Card","div","Card_templateObject","Comment","_this$props","this","props","name","body","email","components_Card","display","justifyContent","marginBottom","flexDirection","href","Component","Button","Button_templateObject","isDisabled","requestComments","postId","type","receiveComments","items","error","addComment","formData","Input","input","AddComment_templateObject","AddComment","title","isDisplayingForm","handleInputChange","e","_this","setState","Object","defineProperty","currentTarget","value","handleSubmit","dispatch","_this$state","_this2","_this$state2","components_Button","onClick","submitIsDisabled","isSmallScreen","marginRight","onChange","placeholder","marginLeft","width","border","backgroundColor","borderRadius","resize","padding","rows","React","Comments_templateObject","Comments","isLoading","comments","fetchingComments","regenerator_default","async","_context","prev","next","t0","awrap","fetch","t1","sent","json","call","t2","slice","stop","retrieveComments","_this$props2","Fragment","Comments_Container","map","comment","i","Comments_Comment","assign","key","Comments_AddComment","_state$comments","Post","isShowingComments","id","index","marginTop","alignItems","fontWeight","containers_Comments","Posts_templateObject","Posts","posts","fetchingPosts","Posts_Container","post","Posts_Post","_state$posts","UPDATE_SCROLL_Y","UPDATE_SCREEN_WIDTH","App","updateScroll","winScrollY","document","scrollTop","documentElement","updateScreen","window","innerWidth","addEventListener","removeEventListener","containers_Header","containers_Posts","Boolean","location","hostname","match","arguments","length","undefined","action","objectSpread2","newComment","newComments","toConsumableArray","initialState","combineReducers","store","createStore","reducers","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","containers_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8dc7956a.chunk.js","sourcesContent":["export const screenBreakpoints = {\n  small: 576,\n  tablet: 750\n};\n\nexport const colours = {\n  primary: \"#acd0e6\"\n};\n","import React from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\n\nimport { screenBreakpoints, colours } from \"../../theme\";\nimport { PropTypes } from \"prop-types\";\n\nconst Container = styled(animated.header)`\n  @media (max-width: ${screenBreakpoints.tablet}px) {\n    justify-content: space-around;\n  }\n\n  font-family: Chomsky;\n  padding: 0 5%;\n  position: sticky;\n  width: 100%;\n  top: 0px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  line-height: 1.3em;\n`;\n\nfunction Header({ hasScrolled, screenWidth }) {\n  const animation = useSpring({\n    fontSize:\n      screenWidth <= screenBreakpoints.small\n        ? \"2em\"\n        : hasScrolled\n        ? \"2.5em\"\n        : \"3em\",\n    background: hasScrolled\n      ? `linear-gradient(white 90%, ${colours.primary} 10%)`\n      : `linear-gradient(${colours.primary} 0%, ${colours.primary} 100%)`\n  });\n\n  return (\n    <Container style={animation}>\n      <span>Fake Latin News</span>\n      {screenWidth > screenBreakpoints.tablet && (\n        <span\n          style={{\n            fontSize: \"0.5em\",\n            color: \"#666\"\n          }}\n        >\n          Lorem ipsum dolor sit amet\n        </span>\n      )}\n    </Container>\n  );\n}\n\nHeader.propTypes = {\n  hasScrolled: PropTypes.bool.isRequired,\n  screenWidth: PropTypes.number.isRequired\n};\n\nexport default connect(state => ({\n  hasScrolled: state.userMetrics.scrollY > 0,\n  screenWidth: state.userMetrics.screenWidth\n}))(Header);\n","import styled from \"styled-components\";\n\nconst Card = styled.div`\n  border-radius: 5px;\n  margin-top: 20px;\n  padding: 5px 15px;\n`;\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport Card from \"../components/Card\";\nimport { screenBreakpoints } from \"../../theme\";\n\nclass Comment extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    screenWidth: PropTypes.number.isRequired\n  };\n\n  render() {\n    const { name, body, email, screenWidth } = this.props;\n\n    return (\n      <Card>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            marginBottom: 10,\n            flexDirection: screenWidth <= screenBreakpoints.small && \"column\"\n          }}\n        >\n          <strong\n            style={{\n              marginBottom: screenWidth <= screenBreakpoints.small && 10\n            }}\n          >\n            {name}\n          </strong>\n          <a href={\"mailto:\" + email}>{email}</a>\n        </div>\n        <div>{body}</div>\n      </Card>\n    );\n  }\n}\n\nexport default connect(state => ({\n  screenWidth: state.userMetrics.screenWidth\n}))(Comment);\n","import styled from \"styled-components\";\nimport { colours } from \"../../theme\";\n\nconst Button = styled.div`\n  border-radius: 10px;\n  padding: 5px 10px;\n  font-weight: bold;\n\n  ${props => {\n    if (props.isDisabled) {\n      return `\n        cursor: default;\n        background-color: lightgray;\n        border: 2px solid lightgray;\n      `;\n    } else {\n      return `\n        cursor: pointer;\n        background-color: ${colours.primary};\n        border: 2px solid ${colours.primary};\n      `;\n    }\n  }};\n`;\n\nexport default Button;\n","export const REQUEST_COMMENTS = \"REQUEST_COMMENTS\";\nexport const RECEIVE_COMMENTS = \"RECEIVE_COMMENTS\";\nexport const ADD_COMMENT = \"ADD_COMMENT\";\n\nexport const requestComments = postId => ({\n  type: REQUEST_COMMENTS,\n  postId\n});\n\nexport const receiveComments = (postId, items, error) => ({\n  type: RECEIVE_COMMENTS,\n  items,\n  postId,\n  error\n});\n\nexport const retrieveComments = postId => async dispatch => {\n  dispatch(requestComments(postId));\n\n  let comments, error;\n  try {\n    comments = await (\n      await fetch(\n        \"https://jsonplaceholder.typicode.com/comments?postId=\" + postId\n      )\n    ).json();\n  } catch (e) {\n    error = true;\n    comments = [];\n  }\n\n  dispatch(receiveComments(postId, comments.slice(0, 5), error));\n};\n\nexport const addComment = (postId, formData) => ({\n  type: ADD_COMMENT,\n  postId,\n  formData\n});\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\n\nimport Card from \"../components/Card\";\nimport Button from \"../components/Button\";\nimport { addComment } from \"../../actions/comments\";\nimport { screenBreakpoints } from \"../../theme\";\n\nconst Input = styled.input`\n  @media (max-width: ${screenBreakpoints.tablet}px) {\n    width: 100%;\n  }\n\n  width: 35%\n  border: none;\n  background-color: #efefef;\n  border-radius: 3px;\n  font-weight: bold;\n  line-height: 2em;\n  padding-left: 5px;\n`;\n\nclass AddComment extends React.Component {\n  static propTypes = {\n    postId: PropTypes.number.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    screenWidth: PropTypes.number.isRequired\n  };\n\n  state = {\n    title: \"\",\n    email: \"\",\n    body: \"\",\n    isDisplayingForm: false\n  };\n\n  handleInputChange = e => {\n    this.setState({ [e.currentTarget.name]: e.currentTarget.value });\n  };\n\n  handleSubmit = () => {\n    const { dispatch, postId } = this.props;\n    const { title, email, body } = this.state;\n\n    if (title === \"\" || email === \"\" || body === \"\") {\n      return;\n    }\n\n    dispatch(addComment(postId, { name: title, email, body }));\n    this.setState({\n      title: \"\",\n      email: \"\",\n      body: \"\"\n    });\n  };\n\n  render() {\n    const { title, email, body, isDisplayingForm } = this.state;\n    const { screenWidth } = this.props;\n\n    if (!isDisplayingForm) {\n      return (\n        <Card>\n          <div style={{ display: \"flex\" }}>\n            <Button\n              style={{ marginBottom: 10 }}\n              onClick={() => {\n                this.setState({ isDisplayingForm: true });\n              }}\n            >\n              <strong>Add a comment</strong>\n            </Button>\n          </div>\n        </Card>\n      );\n    }\n\n    const submitIsDisabled = title === \"\" || email === \"\" || body === \"\";\n    const isSmallScreen = screenWidth < screenBreakpoints.small;\n\n    return (\n      <Card>\n        <div\n          style={{\n            display: \"flex\",\n            marginBottom: 10,\n            flexDirection: isSmallScreen && \"column\" // @Incomplete - use media queries\n          }}\n        >\n          <Input\n            style={{\n              marginRight: 20,\n              marginBottom: isSmallScreen && 10 // @Incomplete - use media queries\n            }}\n            value={title}\n            onChange={this.handleInputChange}\n            name=\"title\"\n            placeholder=\"Title...\"\n          />\n          <Input\n            value={email}\n            onChange={this.handleInputChange}\n            name=\"email\"\n            placeholder=\"Email...\"\n          />\n          {!isSmallScreen && (\n            <Button\n              style={{\n                marginLeft: \"auto\"\n              }}\n              isDisabled={submitIsDisabled}\n              onClick={this.handleSubmit}\n            >\n              Submit\n            </Button>\n          )}\n        </div>\n        <textarea\n          style={{\n            width: \"100%\",\n            border: \"none\",\n            backgroundColor: \"#efefef\",\n            borderRadius: \"5px\",\n            resize: \"none\",\n            padding: \"5px 10px\",\n            marginBottom: 10\n          }}\n          rows={3}\n          name=\"body\"\n          value={body}\n          onChange={this.handleInputChange}\n          placeholder=\"Add a comment...\"\n        />\n        {isSmallScreen && (\n          <div\n            style={{\n              display: \"flex\"\n            }}\n          >\n            <Button isDisabled={submitIsDisabled} onClick={this.handleSubmit}>\n              Submit\n            </Button>\n          </div>\n        )}\n      </Card>\n    );\n  }\n}\n\nexport default connect(state => ({\n  screenWidth: state.userMetrics.screenWidth\n}))(AddComment);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport Comment from \"./Comment\";\nimport AddComment from \"./AddComment\";\nimport { retrieveComments } from \"../../actions/comments\";\nimport { screenBreakpoints } from \"../../theme\";\n\nconst Container = styled.div`\n  @media (max-width: ${screenBreakpoints.tablet}px) {\n    width: 100%;\n    margin-left: 0%;\n  }\n\n  margin-left: 5%;\n  width: 90%;\n`;\n\nclass Comments extends React.Component {\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    postId: PropTypes.number.isRequired,\n    // @Question - it doesn't matter if we set fetchingComments flag so do we\n    // need it? Does it just improve readability, perhaps the store should be\n    // restructued so that comments are in the post object\n    comments: PropTypes.any,\n    error: PropTypes.bool\n  };\n\n  state = {\n    isLoading: true\n  };\n\n  componentDidMount() {\n    const { dispatch, postId, comments } = this.props;\n    if (comments == null || comments.fetchingComments) {\n      dispatch(retrieveComments(postId));\n    }\n  }\n\n  render() {\n    const { comments, postId, error } = this.props;\n\n    if (error) {\n      return <div>Sorry there was an error! Please try again</div>;\n    }\n\n    if (comments == null || comments.fetchingComments) {\n      return <div>Fetching comments</div>;\n    }\n    return (\n      <>\n        <Container>\n          {comments.map((comment, i) => (\n            <Comment {...comment} key={i} />\n          ))}\n        </Container>\n        <AddComment postId={postId} />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state, props) => {\n  const { items, error } = state.comments;\n  return { comments: items[props.postId], error };\n};\n\nexport default connect(mapStateToProps)(Comments);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Comments from \"../Comments\";\nimport Button from \"../components/Button\";\n\nclass Post extends Component {\n  static propTypes = {\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired\n  };\n\n  state = {\n    isShowingComments: false\n  };\n\n  render() {\n    const { id, title, body, index } = this.props;\n\n    const { isShowingComments } = this.state;\n\n    return (\n      <div style={{ marginBottom: 20, marginTop: 20 }}>\n        {index !== 0 && <hr />}\n        <div style={{ fontSize: \"1.2em\" }}>\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"baseline\",\n              justifyContent: \"space-between\"\n            }}\n          >\n            <div\n              style={{\n                marginBottom: 10,\n                fontSize: \"1.2em\",\n                fontWeight: \"bold\"\n              }}\n            >\n              {title}\n            </div>\n          </div>\n          <div>{body}</div>\n        </div>\n        <div style={{ display: \"flex\", marginTop: 20 }}>\n          <Button\n            onClick={() => {\n              this.setState({ isShowingComments: !isShowingComments });\n            }}\n          >\n            {isShowingComments ? \"Comments \\u2193 \" : \"Comments \\u2192\"}\n          </Button>\n        </div>\n        {isShowingComments && <Comments postId={id} />}\n      </div>\n    );\n  }\n}\n\nexport default Post;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\n\nimport Post from \"./Post\";\nimport { screenBreakpoints } from \"../../theme\";\nimport { retrievePosts } from \"../../actions/posts\";\n\nconst Container = styled.div`\n  @media (max-width: ${screenBreakpoints.tablet}px) {\n    width: 98%;\n  }\n\n  width: 80%;\n  margin: 0 auto;\n  max-width: 1050px;\n`;\n\nclass Posts extends Component {\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    posts: PropTypes.array.isRequired,\n    fetchingPosts: PropTypes.bool.isRequired,\n    error: PropTypes.bool\n  };\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch(retrievePosts());\n  }\n\n  render() {\n    const { posts, fetchingPosts, error } = this.props;\n\n    if (error) {\n      return <div>Sorry there was an error! Please try again</div>;\n    }\n\n    if (fetchingPosts) {\n      return <h3>Loading Posts!</h3>;\n    }\n\n    return (\n      <Container>\n        {posts.map((post, i) => (\n          <Post\n            key={post.id}\n            id={post.id}\n            title={post.title}\n            body={post.body}\n            index={i}\n          />\n        ))}\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { fetchingPosts, items, error } = state.posts;\n\n  return {\n    fetchingPosts,\n    posts: items,\n    error\n  };\n};\n\nexport default connect(mapStateToProps)(Posts);\n","export const REQUEST_POSTS = \"REQUEST_POSTS\";\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\n\nexport const requestPosts = () => ({\n  type: REQUEST_POSTS\n});\n\nexport const receivePosts = ({ posts, error }) => ({\n  type: RECEIVE_POSTS,\n  posts,\n  error\n});\n\nexport const retrievePosts = () => async dispatch => {\n  dispatch(requestPosts());\n\n  let posts, error;\n  try {\n    posts = await (\n      await fetch(\"https://jsonplaceholder.typicode.com/posts\")\n    ).json();\n  } catch (e) {\n    posts = [];\n    error = true;\n  }\n\n  dispatch(receivePosts({ posts, error }));\n};\n","export const UPDATE_SCROLL_Y = \"UPDATE_SCROLL_Y\";\nexport const UPDATE_SCREEN_WIDTH = \"UPDATE_SCREEN_WIDTH\";\n\nexport function updateScrollY(scrollY) {\n  return {\n    type: UPDATE_SCROLL_Y,\n    scrollY\n  };\n}\n\nexport function updateScreenWidth(screenWidth) {\n  return {\n    type: UPDATE_SCREEN_WIDTH,\n    screenWidth\n  };\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Header from \"../Header\";\nimport Posts from \"../Posts\";\nimport { updateScrollY, updateScreenWidth } from \"../../actions/userMetrics\";\n\nclass App extends React.Component {\n  updateScroll = () => {\n    const winScrollY =\n      document.body.scrollTop || document.documentElement.scrollTop;\n\n    this.props.dispatch(updateScrollY(winScrollY));\n  };\n\n  updateScreen = () => {\n    // @Incomplete - we should throttle this update\n    this.props.dispatch(updateScreenWidth(window.innerWidth));\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.updateScroll);\n    window.addEventListener(\"resize\", this.updateScreen);\n    this.updateScroll();\n    this.updateScreen();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\", this.updateScroll);\n    window.removeEventListener(\"resize\", this.updateScreen);\n  }\n\n  render() {\n    return (\n      <>\n        <Header />\n        <Posts />\n      </>\n    );\n  }\n}\n\nexport default connect()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  REQUEST_COMMENTS,\n  RECEIVE_COMMENTS,\n  ADD_COMMENT\n} from \"../actions/comments\";\n\nconst comments = (\n  state = {\n    items: {},\n    error: false\n  },\n  action\n) => {\n  switch (action.type) {\n    case REQUEST_COMMENTS:\n      return {\n        ...state,\n        items: {\n          ...state.items,\n          [action.postId]: { fetchingComments: true }\n        }\n      };\n    case RECEIVE_COMMENTS:\n      return {\n        ...state,\n        error: action.error,\n        items: { ...state.items, [action.postId]: action.items }\n      };\n    case ADD_COMMENT:\n      const newComment = { ...action.formData, postId: action.postId };\n      const newComments = [...state.items[action.postId], newComment];\n      return {\n        ...state,\n        items: { ...state.items, [action.postId]: newComments }\n      };\n    default:\n      return state;\n  }\n};\n\nexport default comments;\n","import { REQUEST_POSTS, RECEIVE_POSTS } from \"../actions/posts\";\n\nconst posts = (\n  state = {\n    fetchingPosts: true,\n    items: [],\n    error: false\n  },\n  action\n) => {\n  switch (action.type) {\n    case REQUEST_POSTS:\n      return {\n        ...state,\n        fetchingPosts: true\n      };\n    case RECEIVE_POSTS:\n      return {\n        ...state,\n        fetchingPosts: false,\n        items: action.posts,\n        error: action.error\n      };\n    default:\n      return state;\n  }\n};\n\nexport default posts;\n","import { UPDATE_SCROLL_Y, UPDATE_SCREEN_WIDTH } from \"../actions/userMetrics\";\n\nconst initialState = {\n  scrollY: 0,\n  screenWidth: 0\n};\n\nfunction userMetrics(state = initialState, action) {\n  switch (action.type) {\n    case UPDATE_SCROLL_Y:\n      return {\n        ...state,\n        scrollY: action.scrollY\n      };\n    case UPDATE_SCREEN_WIDTH:\n      return {\n        ...state,\n        screenWidth: action.screenWidth\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default userMetrics;\n","import { combineReducers } from \"redux\";\n\nimport comments from \"./comments\";\nimport posts from \"./posts\";\nimport userMetrics from \"./userMetrics\";\n\nexport default combineReducers({\n  posts,\n  comments,\n  userMetrics\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport reducers from \"./reducers\";\n\nconst store = createStore(\n  reducers,\n  compose(\n    applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}